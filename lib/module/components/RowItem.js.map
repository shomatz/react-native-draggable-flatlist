{"version":3,"names":["React","useRef","useDraggableFlatListContext","useRefs","useStableCallback","typedMemo","useSharedValue","RowItem","props","propsRef","value","activeKey","activeKeyRef","current","keyToIndexRef","drag","itemKey","debug","console","log","renderItem","item","extraData","getIndex","get","Inner","rest","MemoizedInner"],"sources":["RowItem.tsx"],"sourcesContent":["import React, { useRef } from \"react\";\nimport { useDraggableFlatListContext } from \"../context/draggableFlatListContext\";\nimport { useRefs } from \"../context/refContext\";\nimport { useStableCallback } from \"../hooks/useStableCallback\";\nimport { RenderItem } from \"../types\";\nimport { typedMemo } from \"../utils\";\nimport { useSharedValue } from \"react-native-reanimated\";\n\ntype Props<T> = {\n  extraData?: any;\n  drag: (itemKey: string) => void;\n  item: T;\n  renderItem: RenderItem<T>;\n  itemKey: string;\n  debug?: boolean;\n};\n\nfunction RowItem<T>(props: Props<T>) {\n  const propsRef = useSharedValue(props);\n  propsRef.value = props;\n\n  const { activeKey } = useDraggableFlatListContext();\n  const activeKeyRef = useRef(activeKey);\n  activeKeyRef.current = activeKey;\n  const { keyToIndexRef } = useRefs();\n\n  const drag = useStableCallback(() => {\n    const { drag, itemKey, debug } = propsRef.value;\n    if (activeKeyRef.current) {\n      // already dragging an item, noop\n      if (debug)\n        console.log(\n          \"## attempt to drag item while another item is already active, noop\"\n        );\n    }\n    drag(itemKey);\n  });\n\n  const { renderItem, item, itemKey, extraData } = props;\n\n  const getIndex = useStableCallback(() => {\n    return keyToIndexRef.value.get(itemKey);\n  });\n\n  return (\n    <MemoizedInner\n      isActive={activeKey === itemKey}\n      drag={drag}\n      renderItem={renderItem}\n      item={item}\n      getIndex={getIndex}\n      extraData={extraData}\n    />\n  );\n}\n\nexport default typedMemo(RowItem);\n\ntype InnerProps<T> = {\n  isActive: boolean;\n  item: T;\n  getIndex: () => number | undefined;\n  drag: () => void;\n  renderItem: RenderItem<T>;\n  extraData?: any;\n};\n\nfunction Inner<T>({ renderItem, extraData, ...rest }: InnerProps<T>) {\n  return renderItem({ ...rest }) as JSX.Element;\n}\n\nconst MemoizedInner = typedMemo(Inner);\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,2BAAT,QAA4C,qCAA5C;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AAEA,SAASC,SAAT,QAA0B,UAA1B;AACA,SAASC,cAAT,QAA+B,yBAA/B;;AAWA,SAASC,OAAT,CAAoBC,KAApB,EAAqC;EACnC,MAAMC,QAAQ,GAAGH,cAAc,CAACE,KAAD,CAA/B;EACAC,QAAQ,CAACC,KAAT,GAAiBF,KAAjB;EAEA,MAAM;IAAEG;EAAF,IAAgBT,2BAA2B,EAAjD;EACA,MAAMU,YAAY,GAAGX,MAAM,CAACU,SAAD,CAA3B;EACAC,YAAY,CAACC,OAAb,GAAuBF,SAAvB;EACA,MAAM;IAAEG;EAAF,IAAoBX,OAAO,EAAjC;EAEA,MAAMY,IAAI,GAAGX,iBAAiB,CAAC,MAAM;IACnC,MAAM;MAAEW,IAAF;MAAQC,OAAR;MAAiBC;IAAjB,IAA2BR,QAAQ,CAACC,KAA1C;;IACA,IAAIE,YAAY,CAACC,OAAjB,EAA0B;MACxB;MACA,IAAII,KAAJ,EACEC,OAAO,CAACC,GAAR,CACE,oEADF;IAGH;;IACDJ,IAAI,CAACC,OAAD,CAAJ;EACD,CAV6B,CAA9B;EAYA,MAAM;IAAEI,UAAF;IAAcC,IAAd;IAAoBL,OAApB;IAA6BM;EAA7B,IAA2Cd,KAAjD;EAEA,MAAMe,QAAQ,GAAGnB,iBAAiB,CAAC,MAAM;IACvC,OAAOU,aAAa,CAACJ,KAAd,CAAoBc,GAApB,CAAwBR,OAAxB,CAAP;EACD,CAFiC,CAAlC;EAIA,oBACE,oBAAC,aAAD;IACE,QAAQ,EAAEL,SAAS,KAAKK,OAD1B;IAEE,IAAI,EAAED,IAFR;IAGE,UAAU,EAAEK,UAHd;IAIE,IAAI,EAAEC,IAJR;IAKE,QAAQ,EAAEE,QALZ;IAME,SAAS,EAAED;EANb,EADF;AAUD;;AAED,eAAejB,SAAS,CAACE,OAAD,CAAxB;;AAWA,SAASkB,KAAT,OAAqE;EAAA,IAAnD;IAAEL,UAAF;IAAcE,SAAd;IAAyB,GAAGI;EAA5B,CAAmD;EACnE,OAAON,UAAU,CAAC,EAAE,GAAGM;EAAL,CAAD,CAAjB;AACD;;AAED,MAAMC,aAAa,GAAGtB,SAAS,CAACoB,KAAD,CAA/B"}